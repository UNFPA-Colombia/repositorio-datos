generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Territorios {
  divipola            String                @id @db.VarChar(5)
  nombre              String                @db.VarChar(255)
  entradasNumericas   EntradasNumericas[]
  entradasCategoricas EntradasCategoricas[]
  tipo                TiposTerritorios
  superiores          Territorios[]         @relation("Rango")
  inferiores          Territorios[]         @relation("Rango")
}

enum TiposTerritorios {
  Municipio
  Departamento
  Pais
  RegionPDET
}

model Repositorios {
  id          Int           @id @default(autoincrement())
  nombre      String        @db.VarChar(255)
  descripcion String        @db.VarChar(255)
  indicadores Indicadores[]
}

model Indicadores {
  id                   Int                   @id @default(autoincrement())
  nombre               String                @db.VarChar(255)
  descripcion          String                @db.VarChar(255)
  repositorio          Repositorios[]
  variablesNumericas   VariblesNumericas[]
  variablesCategoricas VariblesCategoricas[]
}

model VariblesNumericas {
  id              Int                 @id @default(autoincrement())
  Indicador       Indicadores         @relation(fields: [indicadorId], references: [id])
  indicadorId     Int
  nombre          String              @db.VarChar(255)
  descripcion     String              @db.VarChar(255)
  unidad          String              @db.VarChar(255)
  Entradas        EntradasNumericas[]
  desagregacionR  Desagregaciones?    @relation(fields: [desagregacionId], references: [id])
  desagregacionId Int?
}

model EntradasNumericas {
  municipioR          Territorios              @relation(fields: [territorio], references: [divipola])
  territorio          String                   @db.VarChar(5)
  fecha               DateTime                 @db.Date
  variableR           VariblesNumericas        @relation(fields: [variableId], references: [id])
  variableId          Int
  final               Boolean                  @default(true)
  valor               Float                    @db.DoublePrecision
  desagregacionR      Desagregaciones?         @relation(fields: [desagregacionId], references: [id])
  desagregacionId     Int?
  opcionR             OpcionesDesagregaciones? @relation(fields: [opcionDesagregacion], references: [id])
  opcionDesagregacion Int?
  fuenteR             Fuentes?                 @relation(fields: [fuenteId], references: [id])
  fuenteId            Int?

  @@id([territorio, fecha, variableId])
}

model VariblesCategoricas {
  id              Int                   @id @default(autoincrement())
  Indicador       Indicadores           @relation(fields: [indicadorId], references: [id])
  indicadorId     Int
  nombre          String                @db.VarChar(255)
  descripcion     String                @db.VarChar(255)
  Entradas        EntradasCategoricas[]
  categoriaR      Categorias            @relation(fields: [categoriaId], references: [id])
  categoriaId     Int
  desagregacionR  Desagregaciones?      @relation(fields: [desagregacionId], references: [id])
  desagregacionId Int?
}

model EntradasCategoricas {
  territorioR           Territorios              @relation(fields: [territorio], references: [divipola])
  territorio            String                   @db.VarChar(5)
  fecha                 DateTime                 @db.Date
  variableR             VariblesCategoricas      @relation(fields: [variableId], references: [id])
  variableId            Int
  final                 Boolean                  @default(true)
  valor                 Opciones                 @relation(fields: [valorId], references: [id])
  valorId               Int
  desagregacionR        Desagregaciones?         @relation(fields: [desagregacionId], references: [id])
  desagregacionId       Int?
  fuenteR               Fuentes?                 @relation(fields: [fuenteId], references: [id])
  fuenteId              Int?
  opcionR               OpcionesDesagregaciones? @relation(fields: [opcionDesagregacionId], references: [id])
  opcionDesagregacionId Int?

  @@id([territorio, fecha, variableId])
}

model Categorias {
  id          Int                   @id @default(autoincrement())
  nombre      String                @db.VarChar(255)
  descripcion String                @db.VarChar(255)
  opciones    Opciones[]
  variables   VariblesCategoricas[]
}

model Opciones {
  id          Int                   @id @default(autoincrement())
  categoria   Categorias            @relation(fields: [categoriaId], references: [id])
  categoriaId Int
  nombre      String                @db.VarChar(255)
  descripcion String                @db.VarChar(255)
  entradas    EntradasCategoricas[]
}

model Desagregaciones {
  id                   Int                       @id @default(autoincrement())
  nombre               String                    @db.VarChar(255)
  descripcion          String                    @db.VarChar(255)
  variables            OpcionesDesagregaciones[]
  variablesCategoricas VariblesCategoricas[]
  variablesNumericas   VariblesNumericas[]
  entradasNumericas    EntradasNumericas[]
  entradasCategoricas  EntradasCategoricas[]
}

model OpcionesDesagregaciones {
  id                  Int                   @id @default(autoincrement())
  desagregacion       Desagregaciones       @relation(fields: [desagregacionId], references: [id])
  desagregacionId     Int
  nombre              String                @db.VarChar(255)
  descripcion         String                @db.VarChar(255)
  entradasNumericas   EntradasNumericas[]
  entradasCategoricas EntradasCategoricas[]
}

model Fuentes {
  id                  Int                   @id @default(autoincrement())
  nombre              String                @db.VarChar(255)
  descripcion         String                @db.VarChar(255)
  entradasNumericas   EntradasNumericas[]
  entradasCategoricas EntradasCategoricas[]
}

model Usuarios {
  id           Int      @id @default(autoincrement())
  email        String   @unique @db.VarChar(255)
  nombre       String?  @db.VarChar(255)
  passwordHash String   @db.VarChar(255)
  rol          Rol      @default(USER)
  createdAt    DateTime @default(now()) @db.Date
  updatedAt    DateTime @updatedAt @db.Date
}

enum Rol {
  USER
  ADMIN
}
