generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Municipios {
  divipola            String                @id @db.VarChar(5)
  nombre              String                @db.VarChar(255)
  departamentoR       Departamentos         @relation(fields: [departamento], references: [divipola])
  departamento        String                @db.VarChar(5)
  regionR             Regiones?             @relation(fields: [region], references: [divipola])
  region              String?               @db.VarChar(5)
  entradasNumericas   EntradasNumericas[]
  entradasCategoricas EntradasCategoricas[]
  CiudadPrincipal     Boolean               @default(false)
  Total               Boolean               @default(false)
}

model Departamentos {
  divipola   String       @id @db.VarChar(5)
  nombre     String       @db.VarChar(255)
  municipios Municipios[]
}

model Regiones {
  divipola   String       @id @db.VarChar(5)
  nombre     String       @db.VarChar(255)
  municipios Municipios[]
}

model Repositorios {
  id          Int           @id @default(autoincrement())
  nombre      String        @db.VarChar(255)
  descripcion String        @db.VarChar(255)
  indicadores Indicadores[]
}

model Indicadores {
  id                   Int                   @id @default(autoincrement())
  nombre               String                @db.VarChar(255)
  descripcion          String                @db.VarChar(255)
  repositorio          Repositorios[]
  variablesNumericas   VariblesNumericas[]
  variablesCategoricas VariblesCategoricas[]
}

model VariblesNumericas {
  id          Int                 @id @default(autoincrement())
  Indicador   Indicadores         @relation(fields: [indicadorId], references: [id])
  indicadorId Int
  nombre      String              @db.VarChar(255)
  descripcion String              @db.VarChar(255)
  unidad      String              @db.VarChar(255)
  Entradas    EntradasNumericas[]
}

model EntradasNumericas {
  municipioR Municipios        @relation(fields: [municipio], references: [divipola])
  municipio  String            @db.VarChar(5)
  anio       Int               @db.SmallInt
  variableR  VariblesNumericas @relation(fields: [variableId], references: [id])
  variableId Int
  final      Boolean           @default(true)
  valor      Float             @db.DoublePrecision

  @@id([municipio, anio, variableId])
}

model VariblesCategoricas {
  id          Int                   @id @default(autoincrement())
  Indicador   Indicadores           @relation(fields: [indicadorId], references: [id])
  indicadorId Int
  nombre      String                @db.VarChar(255)
  descripcion String                @db.VarChar(255)
  Entradas    EntradasCategoricas[]
  categoriaR  Categorias            @relation(fields: [categoriaId], references: [id])
  categoriaId Int
}

model EntradasCategoricas {
  municipioR Municipios          @relation(fields: [municipio], references: [divipola])
  municipio  String              @db.VarChar(5)
  anio       Int                 @db.SmallInt
  variableR  VariblesCategoricas @relation(fields: [variableId], references: [id])
  variableId Int
  final      Boolean             @default(true)
  valor      Opciones            @relation(fields: [valorId], references: [id])
  valorId    Int

  @@id([municipio, anio, variableId])
}

model Categorias {
  id          Int                   @id @default(autoincrement())
  nombre      String                @db.VarChar(255)
  descripcion String                @db.VarChar(255)
  opciones    Opciones[]
  variables   VariblesCategoricas[]
}

model Opciones {
  id          Int                   @id @default(autoincrement())
  categoria   Categorias            @relation(fields: [categoriaId], references: [id])
  categoriaId Int
  nombre      String                @db.VarChar(255)
  descripcion String                @db.VarChar(255)
  entradas    EntradasCategoricas[]
}
